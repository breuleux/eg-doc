
require:
   "earlgrey/5" as eg
   "earlgrey/lib5/expand" ->
      topscope
   repple ->
      Repl, DOM
   quaint ->
      tools, create
      Text, Oper, Seq
   jquery

provide:
   setup

globals:
   System
   document, window, alert, setTimeout, Element
   decodeURIComponent


egrepl{elements} =

   globvar = "$eg$global"
   gene = eg.Generator with {
      interactive = true
      globvar = globvar
      es5 = true
      noboil = true
   }
   _ev = eg.evaluator with {
      globvar = globvar
      global = global
      filename = "<repl>"
      showname = "<repl>"
      cwd = "<repl>"
   }

   ev{text} =
      let code = gene.generate{eg.Source{text, "<repl>"}}
      _ev{code}
   evi{text} =
      let code = gene.generateInteractive{eg.Source{text, "<repl>"}}
      _ev{code}

   repl = Repl with {
      elements = elements
      async eval{text} =
         try:
            res = await evi{text}
            #success{res}
         catch e:
            #failure{e}
   }

   glob = global

   repl.setenv{values} =
      items{values} each {name, value} ->
         gene.env.bind{topscope, name, #variable{name}}
         glob[name] = value
      undefined

   repl.setenv with {
      $io = {}
      $currenti = -1
      System = System
      DOM = DOM
   }

   repl.eval with S[
      globals:
         window, document, alert

      wait = promisify with {d, f} -> setTimeout.call{null, f, d}

      _load{match url} =
         R".js$"? ->
            new Promise with {resolve, reject} ->
               document.getElementsByTagName{"head"}[0].appendChild with
                  DOM with script %
                     async = true
                     type = "text/javascript"
                     src = url
                     onload{} = resolve{undefined}
         R".css$"? ->
            document.getElementsByTagName{"head"}[0].appendChild with
               DOM with link %
                  rel = "stylesheet"
                  type = "text/css"
                  href = url
            undefined
         else ->
            throw E.unknown_resource_type{url}

      inline-macro $out{match}:
         do:
            globals: $currenti
         #void{} ->
            `$io[^=$currenti]`
         expr ->
            `$io[^=$currenti][^expr]`

      inline-macro print{expr}:
         ;; out = @mark{`$out`}
         ;; `t = ^expr, $out.log{t}, t`
         `t = ^expr, $io[$currenti].log{t}, t`

      inline-macro __require{#data{expr}}:
         ```
         t = ^expr
         name = match t:
            RegExp{"^raw:"}? x -> x.slice{4}
            RegExp{":"}? x -> x
            x -> "npm:" + x
         await System.import{name}
         ```

      inline-macro load{url}:
         `await _load{^url}`

   ]

   repl


fget{url} =
   new Promise with {resolve, reject} ->
      jquery.ajax with {
         url = url
         type = "GET"
         contentType = "text/plain"
         error{jqxhr, statusText, error} =
            reject{E.ajax{error or statusText, {statusText = statusText, error = error}}}
         success{result} =
            resolve{result}
      }




getcode{engine, node} =
   code = tools.rawRelative{tools.shed{node}}
   lines = code.split{"\n"}
   while [R"^ *$"? lines[0]]:
      lines.shift{}
   while [R"^ *$"? lines[lines.length - 1]]:
      lines.pop{}
   ;; R"( *)(.*)"! {_, indent, line0} = lines[0]
   ;; nindent = indent.length
   ;; xs.join{"\n"} where
   ;;    xs = {line0} ++
   ;;       lines.slice{1} each line ->
   ;;          line.slice{nindent}
   tools.dedent{lines.join{"\n"}}

ri{a, match = null} =
   null? ->
      Math.floor{Math.random{} * a}
   b ->
      Math.floor{a + Math.random{} * [b - a]}


shuffle{a} =
   n = a.length
   0..[n - 1] each i ->
      j = ri{i, n}
      {a[i], a[j]} = {a[j], a[i]}
   a


class Cards:

   constructor{@order} =
      @cards = {=}
      @cards-stripped = {=}
      @card-order = {}

   register{path, card} =
      @cards[card.name] = card
      @cards-stripped[card.name.replace{R"^([0-9]+)-", ""}] = card

   shuffle{} =
      @card-order = shuffle{xs} where
         xs = items{@cards} each {k, v} -> v

   sort{} =
      ord = items{@cards}.sort with
         {{R"^([0-9]+)-"! {_, Number! n1}, _}
          {R"^([0-9]+)-"! {_, Number! n2}, _}} ->
            n1 - n2
      @card-order = ord each {k, v} -> v

   .get{match name = null} =
      null? ->
         if @card-order == {}:
            self[@order]{}
         @card-order.shift{}
      else ->
         @cards-stripped[name]

   "::repr"{repr} =
      repr with
         object with items{@cards} each {name, {=> descr}} ->
            {code % name, span % descr}


async populate-cards{plugin, manifest} =
   async populate{filename} =
      contents = await fget{'doc/{filename}'}
      q = create{plugin}
      q.run{contents}
   filenames = [await fget{'doc/{manifest}'}].split{"\n"}
   await all
      filenames each filename when filename -> populate{filename}


class ReplPlugin:

   constructor{@repl, order} =
      @cards = Cards{order}

   clickable{code, text = null} =
      .clickable %
         async onclick{e and {=> shiftKey}} =
            match shiftKey:
               do: e.preventDefault{}
               true? ->
                  @repl.cm.setValue{code}
                  @repl.cm.focus{}
               else ->
                  await @repl.process_all{code, true, true}
                  @repl.cm.focus{}
         text or @repl.highlight{code, true}

   make-row{items} =
      span %
         enumerate{items} each {match, item} ->
            0 ->
               item
            else ->
               span % [span.separator % "", item]

   install-to{eng} =

      eng.register-document with {
         cards = @cards
      }

      eng.register-rule with {

         "\\maybe\\label / \\code"{engine, {label => match, => code}} =
            #text{""} ->
               match tools.collapse{"/", code}:
                  {x} -> @clickable{getcode{engine, x}}
                  {*xs} -> @make-row with
                     xs each x -> @clickable{getcode{engine, x}, null}
            label ->
               @clickable with
                  getcode{engine, code}
                  engine.gen{label}

         "\\tag ---> \\descr ---> \\contents"{engine, match} =
            {=> tag, => descr, => contents} ->
               var doc = null
               var code = null
               tools.statements{contents} each
                  Seq? {match directive, Oper? {"="}, contents} ->
                     Text? {.doc} ->
                        doc = engine.translate{tools.shedIndent{contents}, .enode} with
                           {paragraph = true}
                     Text? {.code} ->
                        code = getcode{engine, contents}
                     else ->
                        throw E.syntax.unknown_directive{directive}
                  else ->
                     pass
               if not doc and not code:
                  doc =
                     engine.translate{tools.shedIndent{contents}, .enode} with
                        {paragraph = true}
               genfor %
                  document = "cards"
                  {name = tools.raw{tag}
                   descr = engine.translate{descr, .enode}
                   doc = doc
                   code = code}

      }



async setup{} =

   repl = egrepl with {
      box = document.getElementById{"box"}
      target = document.getElementById{"interactive"}
      inputline = document.getElementById{"inputline"}
      textarea = document.getElementById{"code"}
   }

   cool-plugin = ReplPlugin{repl, .shuffle}
   tut-plugin = ReplPlugin{repl, .sort}

   await populate-cards{cool-plugin, "cools.txt"}
   await populate-cards{tut-plugin, "tut.txt"}

   repl.setenv with {
      cools = cool-plugin.cards
      tuts = tut-plugin.cards
      q = create{}
      $repl = repl
      $$clickable = cool-plugin.clickable.bind{cool-plugin}
   }

   await repl.eval with S[

      fade-in{out, contents} =
         out.elem.style.transition = "opacity 500ms";
         out.elem.style.opacity = 0
         window.getComputedStyle{out.elem}.opacity
         out.elem.style.opacity = 1
         out.log{contents}
         undefined

      async __show-cool{out, name, history = true} =
         thecool = cools.get{name}
         if not thecool:
            throw E.nocool{'No entry found for {code % name}'}
         ;; if thecool.doc:
         ;;    fade-in{out} with
         ;;       div.card.cool %
         ;;          h2 % thecool.descr
         ;;          div % thecool.doc
         ;;          p % '{b%"Click"} on the code below to execute it (Shift-Click to paste)'
         ;;          .coolcode %
         ;;             $$clickable{thecool.code}
         if thecool.code:
            await $repl.process{thecool.code, history}
         undefined

      __show-tut{out, name, history = true} =
         thetut = tuts.get{name}
         if not thetut:
            throw E.notut{'No entry found for {code % name}'}
         if thetut.doc:
            fade-in{out} with
               div.card.tut %
                  if{String{thetut.descr}.starts-with{"..."}
                     ""
                     h2 % thetut.descr}
                  div % thetut.doc
         undefined

      inline-macro cool{x}:
         `__show-cool{$out, ^name}` where
            name = match x:
               #void{} ->
                  `null`
               #value{name} or #symbol{name} ->
                  #value{name}
               else ->
                  x

      inline-macro next{#void{}}:
         `__show-tut{$out, null}`

      inline-macro tut{x}:
         `__show-tut{$out, ^name}` where
            name = match x:
               #void{} ->
                  `null`
               #value{name} or #symbol{name} ->
                  #value{name}
               else ->
                  x
   ]

   await repl.process{"next", false}

   repl.cm.focus{}
   repl
